
ButtonFlash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000360  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080020c  0080020c  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec4  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca8  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051e  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  00002bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	eb d0       	rcall	.+470    	; 0x2f6 <main>
 120:	1d c1       	rjmp	.+570    	; 0x35c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <off>:
    }
}

//lights are off
void off() {
	if((PORTF & 0x0f) != 0)
 124:	81 b3       	in	r24, 0x11	; 17
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	19 f0       	breq	.+6      	; 0x130 <off+0xc>
		PORTF &= 0xf0;
 12a:	81 b3       	in	r24, 0x11	; 17
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	81 bb       	out	0x11, r24	; 17
	
    while((PINF & 0x40) && (PINF & 0x80)); 	//wait for a button to be pressed
 130:	7e 9b       	sbis	0x0f, 6	; 15
 132:	02 c0       	rjmp	.+4      	; 0x138 <off+0x14>
 134:	7f 99       	sbic	0x0f, 7	; 15
 136:	fc cf       	rjmp	.-8      	; 0x130 <off+0xc>
    if((PINF & 0x40) == 0){ 		//if button0 was pressed
 138:	7e 99       	sbic	0x0f, 6	; 15
 13a:	07 c0       	rjmp	.+14     	; 0x14a <off+0x26>
	    while(!(PINF & 0x40));  		//wait for button0 to be released
 13c:	7e 9b       	sbis	0x0f, 6	; 15
 13e:	fe cf       	rjmp	.-4      	; 0x13c <off+0x18>
	    button = 0;
 140:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 144:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 148:	08 95       	ret
    } else { 						//button1 was pressed
	    while(!(PINF & 0x80));  		//wait for button1 to be released
 14a:	7f 9b       	sbis	0x0f, 7	; 15
 14c:	fe cf       	rjmp	.-4      	; 0x14a <off+0x26>
	    button = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 156:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 15a:	08 95       	ret

0000015c <delay>:
			return;
	}
}

int delay(unsigned int msec) {
	unsigned int count = msec / 5;
 15c:	9c 01       	movw	r18, r24
 15e:	ad ec       	ldi	r26, 0xCD	; 205
 160:	bc ec       	ldi	r27, 0xCC	; 204
 162:	ed d0       	rcall	.+474    	; 0x33e <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
	for(int i = 0; i < count; i++) {
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	d9 f4       	brne	.+54     	; 0x1a6 <delay+0x4a>
				return 0;
			else 		//else button1 was pressed
				return 1;
		}
	}
	return -1;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	08 95       	ret
}

int delay(unsigned int msec) {
	unsigned int count = msec / 5;
	for(int i = 0; i < count; i++) {
		if((PINF & 0x40) && (PINF & 0x80)) //if a button was not pressed
 176:	7e 9b       	sbis	0x0f, 6	; 15
 178:	10 c0       	rjmp	.+32     	; 0x19a <delay+0x3e>
 17a:	7f 9b       	sbis	0x0f, 7	; 15
 17c:	0e c0       	rjmp	.+28     	; 0x19a <delay+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	ef e1       	ldi	r30, 0x1F	; 31
 180:	fe e4       	ldi	r31, 0x4E	; 78
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <delay+0x26>
 186:	00 c0       	rjmp	.+0      	; 0x188 <delay+0x2c>
 188:	00 00       	nop
	}
}

int delay(unsigned int msec) {
	unsigned int count = msec / 5;
	for(int i = 0; i < count; i++) {
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	28 17       	cp	r18, r24
 190:	39 07       	cpc	r19, r25
 192:	89 f7       	brne	.-30     	; 0x176 <delay+0x1a>
				return 0;
			else 		//else button1 was pressed
				return 1;
		}
	}
	return -1;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	08 95       	ret
	unsigned int count = msec / 5;
	for(int i = 0; i < count; i++) {
		if((PINF & 0x40) && (PINF & 0x80)) //if a button was not pressed
			_delay_ms(5);
		else {
			if((PINF & 0x40) == 0) //if button0 was pressed
 19a:	8f b1       	in	r24, 0x0f	; 15
				return 0;
 19c:	86 fb       	bst	r24, 6
 19e:	88 27       	eor	r24, r24
 1a0:	80 f9       	bld	r24, 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 95       	ret
}

int delay(unsigned int msec) {
	unsigned int count = msec / 5;
	for(int i = 0; i < count; i++) {
		if((PINF & 0x40) && (PINF & 0x80)) //if a button was not pressed
 1a6:	7e 9b       	sbis	0x0f, 6	; 15
 1a8:	f8 cf       	rjmp	.-16     	; 0x19a <delay+0x3e>
 1aa:	7f 9b       	sbis	0x0f, 7	; 15
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <delay+0x3e>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	e5 cf       	rjmp	.-54     	; 0x17e <delay+0x22>

000001b4 <rotate>:
}

//rotate the lights being on from 0 - 3 each in turn
void rotate() {
	while(1) {
		PORTF |= 0x1;
 1b4:	88 9a       	sbi	0x11, 0	; 17
		button = delay(1000);
 1b6:	88 ee       	ldi	r24, 0xE8	; 232
 1b8:	93 e0       	ldi	r25, 0x03	; 3
 1ba:	d0 df       	rcall	.-96     	; 0x15c <delay>
 1bc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 1c0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 1c8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 1cc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 1d0:	99 23       	and	r25, r25
 1d2:	8c f5       	brge	.+98     	; 0x236 <rotate+0x82>
			return;
		
		PORTF |= 0x2;
 1d4:	89 9a       	sbi	0x11, 1	; 17
		button = delay(1000);
 1d6:	88 ee       	ldi	r24, 0xE8	; 232
 1d8:	93 e0       	ldi	r25, 0x03	; 3
 1da:	c0 df       	rcall	.-128    	; 0x15c <delay>
 1dc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 1e0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 1e4:	81 b3       	in	r24, 0x11	; 17
 1e6:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 1e8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 1ec:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 1f0:	99 23       	and	r25, r25
 1f2:	0c f5       	brge	.+66     	; 0x236 <rotate+0x82>
			return;
		
		PORTF |= 0x4;
 1f4:	8a 9a       	sbi	0x11, 2	; 17
		button = delay(1000);
 1f6:	88 ee       	ldi	r24, 0xE8	; 232
 1f8:	93 e0       	ldi	r25, 0x03	; 3
 1fa:	b0 df       	rcall	.-160    	; 0x15c <delay>
 1fc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 200:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 204:	81 b3       	in	r24, 0x11	; 17
 206:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 208:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 20c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 210:	99 23       	and	r25, r25
 212:	8c f4       	brge	.+34     	; 0x236 <rotate+0x82>
			return;
		
		PORTF |= 0x8;
		button = delay(1000);
 214:	8b 9a       	sbi	0x11, 3	; 17
 216:	88 ee       	ldi	r24, 0xE8	; 232
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	a0 df       	rcall	.-192    	; 0x15c <delay>
 21c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 220:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 224:	81 b3       	in	r24, 0x11	; 17
 226:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 228:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 22c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 230:	99 23       	and	r25, r25
 232:	0c f4       	brge	.+2      	; 0x236 <rotate+0x82>
 234:	bf cf       	rjmp	.-130    	; 0x1b4 <rotate>
 236:	08 95       	ret

00000238 <flash>:

// flash the lights for 200 mSec and off for 1 sec
void flash() {
	//decrement counter 40 for 200 ms
	while(1) {
		PORTF |= 0xf;
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	81 bb       	out	0x11, r24	; 17
		button = delay(200);
 23e:	88 ec       	ldi	r24, 0xC8	; 200
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	8c df       	rcall	.-232    	; 0x15c <delay>
 244:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 248:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 24c:	81 b3       	in	r24, 0x11	; 17
 24e:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 250:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 254:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 258:	99 23       	and	r25, r25
 25a:	7c f4       	brge	.+30     	; 0x27a <flash+0x42>
			return;
		button = delay(1000);
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	93 e0       	ldi	r25, 0x03	; 3
 260:	7d df       	rcall	.-262    	; 0x15c <delay>
 262:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 266:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		PORTF &= 0x0;
 26a:	81 b3       	in	r24, 0x11	; 17
 26c:	11 ba       	out	0x11, r1	; 17
		if(button >= 0)
 26e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 272:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 276:	99 23       	and	r25, r25
 278:	fc f2       	brlt	.-66     	; 0x238 <flash>
 27a:	08 95       	ret

0000027c <changeState>:
	}
	return -1;
}

void changeState() {
	switch(state) {
 27c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 280:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	91 05       	cpc	r25, r1
 288:	19 f0       	breq	.+6      	; 0x290 <changeState+0x14>
 28a:	02 97       	sbiw	r24, 0x02	; 2
 28c:	19 f0       	breq	.+6      	; 0x294 <changeState+0x18>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <changeState+0x1c>
		case 1:
			rotate();
 290:	91 cf       	rjmp	.-222    	; 0x1b4 <rotate>
			break;
		case 2:
			flash();
 292:	08 95       	ret
			break;
 294:	d1 cf       	rjmp	.-94     	; 0x238 <flash>
		default:
			off();
 296:	08 95       	ret
 298:	45 cf       	rjmp	.-374    	; 0x124 <off>
 29a:	08 95       	ret

0000029c <buttonPressed>:
			break;
	}	
}

void buttonPressed() {
	if(button == 0){ 	//if button0 was pressed
 29c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 2a0:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 2a4:	30 97       	sbiw	r30, 0x00	; 0
 2a6:	81 f4       	brne	.+32     	; 0x2c8 <buttonPressed+0x2c>
		state = stateTable[button][state]; //set state to new state based on button0;
 2a8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <state>
 2ac:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <state+0x1>
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	80 81       	ld	r24, Z
 2ba:	91 81       	ldd	r25, Z+1	; 0x01
 2bc:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <state+0x1>
 2c0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <state>
		changeState();
 2c4:	db cf       	rjmp	.-74     	; 0x27c <changeState>
 2c6:	08 95       	ret
	} else { 		//button1 was pressed
		state = stateTable[button][state]; //set state to new state based on button1;
 2c8:	cf 01       	movw	r24, r30
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	e8 0f       	add	r30, r24
 2d0:	f9 1f       	adc	r31, r25
 2d2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 2d6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 2da:	e8 0f       	add	r30, r24
 2dc:	f9 1f       	adc	r31, r25
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	e0 50       	subi	r30, 0x00	; 0
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 81       	ld	r24, Z
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <state+0x1>
 2ee:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <state>
		changeState();
 2f2:	c4 cf       	rjmp	.-120    	; 0x27c <changeState>
 2f4:	08 95       	ret

000002f6 <main>:
void changeState();
void buttonPressed();

int main(void)
{
	DDRF = 0x0f;
 2f6:	8f e0       	ldi	r24, 0x0F	; 15
 2f8:	80 bb       	out	0x10, r24	; 16
	PORTF |= 0xc0;
 2fa:	81 b3       	in	r24, 0x11	; 17
 2fc:	80 6c       	ori	r24, 0xC0	; 192
 2fe:	81 bb       	out	0x11, r24	; 17
	state = 0;
 300:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <state+0x1>
 304:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <state>
	pressed = 0;
 308:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <pressed+0x1>
 30c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <pressed>
	
	
    while((PINF & 0x40) && (PINF & 0x80));	//wait for a button to be pressed
 310:	7e 9b       	sbis	0x0f, 6	; 15
 312:	02 c0       	rjmp	.+4      	; 0x318 <main+0x22>
 314:	7f 99       	sbic	0x0f, 7	; 15
 316:	fc cf       	rjmp	.-8      	; 0x310 <main+0x1a>
    if((PINF & 0x40) == 0){ 		//if button0 was pressed
 318:	7e 99       	sbic	0x0f, 6	; 15
 31a:	07 c0       	rjmp	.+14     	; 0x32a <main+0x34>
	    while(!(PINF & 0x40));  		//wait for button0 to be released
 31c:	7e 9b       	sbis	0x0f, 6	; 15
 31e:	fe cf       	rjmp	.-4      	; 0x31c <main+0x26>
	    button = 0;
 320:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 324:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 328:	08 c0       	rjmp	.+16     	; 0x33a <main+0x44>
    } else { 				//button1 was pressed
	    while(!(PINF & 0x80));  		//wait for button1 to be released
 32a:	7f 9b       	sbis	0x0f, 7	; 15
 32c:	fe cf       	rjmp	.-4      	; 0x32a <main+0x34>
	    button = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 336:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			} else if ((PINF & 0x80) == 0) { //button1 was pressed
				while(!(PINF & 0x80));  		//wait for button1 to be released
				PORTF &= 0xf0;
			}
	        */
			buttonPressed();
 33a:	b0 df       	rcall	.-160    	; 0x29c <buttonPressed>
 33c:	fe cf       	rjmp	.-4      	; 0x33a <main+0x44>

0000033e <__umulhisi3>:
 33e:	a2 9f       	mul	r26, r18
 340:	b0 01       	movw	r22, r0
 342:	b3 9f       	mul	r27, r19
 344:	c0 01       	movw	r24, r0
 346:	a3 9f       	mul	r26, r19
 348:	70 0d       	add	r23, r0
 34a:	81 1d       	adc	r24, r1
 34c:	11 24       	eor	r1, r1
 34e:	91 1d       	adc	r25, r1
 350:	b2 9f       	mul	r27, r18
 352:	70 0d       	add	r23, r0
 354:	81 1d       	adc	r24, r1
 356:	11 24       	eor	r1, r1
 358:	91 1d       	adc	r25, r1
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
